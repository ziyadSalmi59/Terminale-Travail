#exrecice 1 q3
from ma_pile import creer_pile, est_vide, empiler, depiler, afficher_pile

p1 = creer_pile()

def pile_alternee(entierN):
    for i in range(entierN):
        if i % 2 == 0:
            empiler(p1, i)
        else:
            empiler(p1, -i)
def evaluer_postfixee(chaine):
    l = separer_expression(chaine)
    q = creer_pile()
    v1, v2 = 0, 0
    for element in l:
        if not est_operateur(element):
            empiler(q, element)         
        else:
            v1 = depiler(q)
            v2 = depiler(q)
            op = element
    return (str(v1) + op +  str(v2))

print(eval(evaluer_postfixee("3 5 +")))
    return p1

afficher_pile(pile_alternee(7))

#exercice 2 q1-2-3
p1 = creer_pile()
def vider_pile(pile):
    pass


def sommet_pile(pile):
    if est_vide(p1):
        return None
    else:
        x = depiler(p1)
        afficher_pile(p1)
        empiler(p1, x)
        afficher_pile(p1)
    return x

for i in range(4):
    empiler(p1, i)


p1, p2, Tpile = creer_pile() ,creer_pile(), 0

for i in range(4):
    empiler(p1, i)
    
def taille_pile(pile):
    global Tpile
    
    while not est_vide(p1):
        x = depiler(p1)
        empiler(p2, x)
        Tpile += 1
    afficher_pile(p1)
    afficher_pile(p2)
    print(Tpile, x)

taille_pile(p1)



#Exercice 3
p1 = creer_pile() 
def est_bien_parenthesee(chaine):
    for par in chaine:
        if par == "(":
            empiler(p1, par)
        else:
            if est_vide(p1):
                return False
            else:
                depiler(p1)
                
    if est_vide(p1):
        return True
    else :
        return False
        
print(est_bien_parenthesee("(x+2(y-1)"))



#exercice 4 q1-2
def separer_expression(chaine):
    chars = chaine.split()
    return chars

def est_operateur(data):
    if "+" == data or "-"== data or "*"== data or "/"== data:
        return True
    else:
        return False
    
print(est_operateur("/"))
print(separer_expression("3 5 + 4 2 - *"))



def evaluer_postfixee(chaine):
    l = separer_expression(chaine)
    q = creer_pile()
    v1, v2 = 0, 0
    for element in l:
        if not est_operateur(element):
            empiler(q, element)         
        else:
            v1 = depiler(q)
            v2 = depiler(q)
            op = element
    return (str(v1) + op +  str(v2))

print(eval(evaluer_postfixee("3 5 +")))
            

