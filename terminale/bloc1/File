###exercice 2
##def fileinversé (file):
##    while not file.est_vide():
##        pile.empiler(file.defiler())
##    
##    while not pile.est_vide():
##        file.enfiler(pile.depiler())
##    
##    return file
##
###exercice 3
##def deuxTuplesDeFiles (fileDentiers):
##    FImpaire = file()
##    Fpaire = file()
##    while not fileDentiers.est_vide():
##        tmp = fileDentier.defiler()
##        if tmp % 2 == 0:
##            Fpaire.enfiler(tmp)
##        else :
##            FImpaire.enfiler(tmp)
##    
##    return (Fpaire, Fimpaire)

#exercice 4
class File:
    def __init__(self): # Les éléments sont stockés dans une liste python
        self.data = []
      
    def est_vide(self):
        return len(self.data) == 0 
    
    # Le choix suivant a été fait : La tête de la file correspond au premier élément de la liste 
    #                               (et la queue au premier élément de la liste)
    
    def enfile(self,x):
        self.data.append(x)

    def defile(self):
        assert not self.est_vide(), "Vous avez essayé de défiler une file vide !"
        return self.data.pop(0) 

    def __repr__(self):       # pour afficher convenablement la file             
        """
        Affiche le contenu d'une file
        La tête de file est affichée à gauche et la queue à droite
        """
        s = "|"
        for i in range(len(self.data)) :
            s = s + str(self.data[i]) + "|"
        return s
    
    def taille(self, Tfile):
        """
        Affiche la taille de la file
        """
        tmpFile = file()
        compteur  = 0
        while not Tfile.est_vide():
            tmpFile.enfiler(Tfile.defiler)
            compteur += 1
            
            
from visualisation_arbre import *
from random import randint

# PARTIE 1 - TRAVAIL PRELIMINAIRE Question 2
arbre_cours = [2, [8, [6, [], []], [9, [], []]], [1, [7, [], []], []]]

# PARTIE 1 - TRAVAIL PRELIMINAIRE Question 3
arbre_feuille = [1,[], []]

# # PARTIE 2 - CODE ET TESTS A ECRIRE

def est_vide(arbre):
    '''
    DOCUMENTATION :
    Description de la fontion : Détermine si un arbre est vide
    arbre (list) : Arbre implémenté sous forme de listes imbriquées
    return (bool) : True si l'arbre est vide, False sinon
    
    TESTS :
    >>> est_vide(arbre_cours)
    False
    
    >>> est_vide(arbre_feuille)
    False
    
    >>> arbre_vide = []
    >>> est_vide(arbre_vide)
    True
    '''
    if arbre == []:
        return True
    else:
        return False

def est_feuille(arbre):
    '''
    DOCUMENTATION :
    Description de la fontion : Détermine si l'arbre est une feuille
    arbre (list) : Arbre implémenté sous forme de listes imbriquées
    return (bool) : True si l'arbre est une feuille, False sinon
    
    TESTS :
    >>> arbre_est_feuille = [1, [], []]
    >>> est_feuille(arbre_est_feuille)
    True
    
    >>> arbre_non_feuille = [1, [3, [], []], [4, [], []]]
    >>> est_feuille(arbre_non_feuille)
    False
    '''
    if arbre[1] != [] and arbre[2] != []:
        return False
    else:
        return True
    

def racine(arbre):
    '''
    DOCUMENTATION :
    Description de la fontion : Renvoie la valeur du noeud racine
    arbre (list) : Arbre implémenté sous forme de listes imbriquées
    return (int, str, etc...) : Valeur du noeud racine
    précondition : il faut que l'arbre ne soit pas vide pour recuperer sa racine
    
    TESTS :
    arbre_feuille = [1, [], []]
    >>> racine(arbre_feuille)
    True
    
    arbre_cours = [1, [2, [], []], [3, [], []]]
    >>> racine(arbre_cours)
    True
    '''
    # Vérification de la précondition (voir énoncé : remarques importantes sur le travail)
    assert est_vide(arbre) == True, "il faut que l'arbre ne soit pas vide pour recuperer sa racine !" # A compléter
    # Code de la fonction à compléter
    return arbre[0]

def SAG(arbre):
    '''
    DOCUMENTATION :
    Description de la fontion : Renvoie le sous-arbre gauche de l'arbre
    arbre (list) : Arbre implémenté sous forme de listes imbriquées
    return (list) : sous-arbre gauche
    précondition : arbre ne doit pas être vide
    
    TESTS :
    arbre_feuille = [1, [], []]
    >>> SAG(arbre_feuille)
    None
    
    arbre_cours = [1, [2, [], []], [3, [], []]]
    >>> SAG(arbre_cours)
    arbre_cours[1]
    '''
    # Vérification de la précondition (voir énoncé : remarques importantes sur le travail)
    assert est_vide(arbre) == False, " impossible de renvoyer le SAG d'un arbre vide"
    # Code de la fonction à compléter
    return arbre[1]

def SAD(arbre):
    '''
    DOCUMENTATION :
    Description de la fontion : Renvoie le sous-arbre droit de l'arbre
    arbre (list) : Arbre implémenté sous forme de listes imbriquées
    return (list) : sous-arbre droit
    précondition : Arbre ne doit pas etre vide
    
    TESTS :
    arbre_feuille = [1, [], []]
    >>> SAd(arbre_feuille)
    None
    
    arbre_cours = [1, [2, [], []], [3, [], []]]
    >>> SAD(arbre_cours)
    arbre_cours[2]
    '''
    # Vérification de la précondition (voir énoncé : remarques importantes sur le travail) 
    assert est_vide(arbre) == False, " impossible de renvoyer le SAG d'un arbre vide" 
    # Code de la fonction à compléter
    return arbre[2]

def taille(arbre):
    '''
    DOCUMENTATION :
    Description de la fontion : Calcule la taille d'un arbre
    arbre (list) : Arbre implémenté sous forme de listes imbriquées
    return (int) : Taille de l'arbre
    
    TESTS :
    arbre_vide = []
    >>> taille(arbre_vide)
    True
    
    arbre_feuille = [1, [], []]
    >>> taille(arbre_feuille)
    0
    
    arbre_cours = [1, [2, [], []], [3, [], []]]
    >>> taille(arbre_cours)
    2
    '''
    if est_vide(arbre):
        return 0
    else:
        return 1 + taille(SAG(arbre)) + taille(SAD(arbre))
        
print(taille(arbre_cours))
    

def hauteur(arbre):
    '''
    DOCUMENTATION :
    Description de la fontion : Calcule la hauteur d'un arbre en respectant la convention
            donnée dans l'énoncé
    arbre (list) : Arbre implémenté sous forme de listes imbriquées
    return (int) : Hauteur de l'arbre
    
    TESTS :
    '''
    if est_vide(arbre):
        return -1
    else:
        return 1 + hauteur(SAG(arbre)) + hauteur(SAD(arbre))

print(hauteur(arbre_cours))

def cree_arbre_complet(h, maxi):
    '''
    DOCUMENTATION :
    Description de la fontion : crée un arbre complet de hauteur h
            avec des valeurs de noeud aléatoires comprises entre 0 et maxi inclus
    h (int) : hauteur de l'arbre
    maxi (int) : valeur maximale des noeuds
    return (list) : arbre créé
    '''
        
        

def cree_peigne_gauche(h, maxi):
    '''
    DOCUMENTATION :
    Description de la fontion : crée un arbre peigne gauche de hauteur h
            avec des valeurs de noeud aléatoires comprises entre 0 et maxi inclus
    h (int) : hauteur de l'arbre
    maxi (int) : valeur maximale des noeuds
    return (list) : arbre créé
    '''
    # A compléter

def cree_peigne_droit(h, maxi):
    '''
    DOCUMENTATION :
    Description de la fontion : crée un arbre peigne droit de hauteur h
            avec des valeurs de noeud aléatoires comprises entre 0 et maxi inclus
    h (int) : hauteur de l'arbre
    maxi (int) : valeur maximale des noeuds
    return (list) : arbre créé
    '''
    # A compléter

def est_egal(arbre1, arbre2):
    '''
    DOCUMENTATION :
    Description de la fontion : détermine si deux arbres sont identiques ou différents
    arbre1 (list) : Arbre implémenté sous forme de listes imbriquées
    arbre2 (list) : Arbre implémenté sous forme de listes imbriquées
    return (bool) : True si les deux arbres sont identiques, False sinon 
    
    TESTS :
    '''
    # A compléter

if __name__ == '__main__':
    # Lancement des tests (laisser ces deux lignes de code inchangées)
    import doctest
    doctest.testmod(optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS, verbose=False)
    
    # PARTIE 2 - Question 3
    
    # Creation d'un arbre complet de hauteur 3
        # A compléter
    
    # Creation d'un peigne gauche de hauteur 3
        # A compléter
    
    # Creation d'un peigne droit de hauteur 3
        # A compléter
    
    # PARTIE 2 - Question 4 
    # A compléter

        
##        while not tmpFile.est_vide():
##            Tfile.enfiler(tmpFile.defiler)
##            
##        return "la taille de votre file est " + compteur
      
