Exercice base
class Compte_bancaire :
    def __init__(self, solde, titulaire):
        self.solde = solde
        self.titulaire = titulaire

    def retirer_argent(self, montant):
        if montant > self.solde:
            self.solde = self.solde - montant
            return montant
    
    def deposer_argent(self, montant):
        self.solde = self.solde + montant
        return None
    

compte_Ziyad = Compte_bancaire(100, "Zyiad")
compte_Ismael = Compte_bancaire(50, "Ismael")

billet = compte_Ziyad.retirer_argent(50)
compte_Ismael.retirer_argent(billet)


print("Ziyad a", compte_Ziyad.solde)
print("Ismael a", compte_Ismael.solde)

Exercice 1:

class Eleve :
    def __init__(self, nom, classe, note):
        self.nom = nom
        self.classe = classe
        self.note = note
    
    def a_la_moyenne(self):
        if self.note >= 10:
            return True
        else :
            return False

def compare(elv1, elv2):
    """
    renvoie le nom de l'élève ayant la meilleure note.
    elv1 (Eleve) : eleve 1
    elv2 (Eleve) : eleve 2
    """    
    if elv1.note > elv2.note:
        return elv1.nom
    
    elif elv1.note < elv2.note:
        return elv2.nom
    
    else:
        return elv1.nom, elv2.nom

eleve1 = Eleve('jean', '1ere', 20)
eleve2 = Eleve('Paul', '1ere', 15)
eleve3 = Eleve('Marc', '1ere', 15)

print(eleve1.a_la_moyenne())
print(Eleve.a_la_moyenne(eleve1))

print(compare(eleve2, eleve3))






Exercice 2:

#exercice3
import random
class Personnage:

    def __init__(self, nom, points_de_vie, aptitude_combat):
        self.vie = points_de_vie
        self.nom = nom
        self.apt = self.__limiter_aptitude_combat(aptitude_combat)

    def perd_vie(self, attack_sp_pv):
        random_Num = random.random()
        if random_Num < 0.5:
            if (random_Num * 10) > self.apt:
                nbPoint = 1
                self.vie = self.vie - nbPoint - attack_sp_pv
                print(self.nom+ " perd "+ str(nbPoint)+" de vie")
            else:
                print(self.nom+ " ne perd pas de vie")
    
    def attack_Sp():
        attackSP = random.randint(0, 10)
        if attackSP > 0 and attackSP < 3:
            return 1
            print("Coup attaque special attack special !")
        print("attack special raté")
            
        
        
        
    
    def __limiter_aptitude_combat(self, aptitude_combat):
        if aptitude_combat > 4:
            return 4
        else:
            return aptitude_combat



def game(cmbt1, cmbt2):

    while cmbt1.vie > 0 and cmbt2.vie > 0:
        if cmbt1.vie > 0 and cmbt1.vie < 2:
            print("tentative attack special")
            cmbt1.attack_sp()
            if attack_sp() == 1:
                cmbt2.perd_vie(3)
            
        if cmbt2.vie > 0 and cmbt2.vie < 2:
            print("tentative attack special")
            cmbt2.attack_sp()
            if attack_sp() == 1:
                cmbt1.perd_vie(3)
            
        cmbt1.perd_vie(0)
        cmbt2.perd_vie(0)

    if cmbt1.vie <= 0 and cmbt2.vie > 0:
        msg = str(cmbt2.nom) + " est vainqueur, il lui reste encore " + str(cmbt2.vie) + " points alors que "+str(cmbt1.nom)+" est mort"
    elif cmbt2.vie <= 0 and cmbt1.vie > 0:
        msg = str(cmbt1.nom) + " est vainqueur, il lui reste encore " + str(cmbt1.vie) + " points alors que " + str(cmbt2.nom) +" est mort"
    else:
        msg = "Les deux combattants sont morts en même temps"

    return msg

frodon = Personnage("Frodon", 20,5)
araignee = Personnage("Araignée", 10,3)


Exercice 4
from math import sqrt
class Point:
    def __init__(self, x, y):
        """
        Initialise les variables
        abscisse (int) : abscisse x
        ordonnee (int) : ordonnee y 
        """
        self.x = x
        self.y = y
        self.xa = xa
        self.xb = xb
        self.ya = ya
        self.yb = yb
        
    def distance(self):
        res = sqrt(self.x**2 + self.y**2)
        return res
    
    def longueur_segment(self.xa, self.xb,sefl.ya, self.yb):
        resLG = sqrt( (self.xa - self.xb)**2 + (self.ya - self.yb)**2)
        return resLG
        

pointA = Point(-2,5)
print(pointA.longueur_segment())
    
    
#exercice5
1-2)
from math import sqrt
class Fraction:
    def __init__(self, nome, denome):
        """
        Initialise les variables
        abscisse (int) : abscisse x
        ordonnee (int) : ordonnee y 
        """
        self.numerateur = nome
        self.denominateur = denome
    
    def __repr__(self):
        if self.denominateur == 1:
            return str(self.numerateur)
        else:
            return str(self.numerateur) + " / " + str(self.denominateur)


A = Fraction(12, 1)
print(A)

3)
from math import sqrt
class Fraction:
    def __init__(self, nome, denome):
        """
        Initialise les variables
        abscisse (int) : abscisse x
        ordonnee (int) : ordonnee y 
        """
        self.numerateur = nome
        self.denominateur = denome
    
    def __repr__(self):
        if self.denominateur == 1:
            return str(self.numerateur)
        else:
            return str(self.numerateur) + " / " + str(self.denominateur)
    
    def __eq__(self, frac2):
        res1 = self.numerateur / self.denominateur
        res2 = frac2.numerateur / frac2.denominateur
        return res1 == res2
    
    def __lt__(self, frac2):
        res1 = self.numerateur / self.denominateur
        res2 = frac2.numerateur / frac2.denominateur
        return res1 < res2
    
    def __gt__(self, frac2):
        return None
        


Frac1 = Fraction(12, 21)
Frac2 = Fraction(12, 35)
print(Frac1 > Frac2)
# print(Frac2 < Frac1)



5)
from math import sqrt
class Fraction:
    def __init__(self, nome, denome):
        """
        Initialise les variables
        abscisse (int) : abscisse x
        ordonnee (int) : ordonnee y 
        """
        self.numerateur = nome
        self.denominateur = denome
    
    def __repr__(self):
        if self.denominateur == 1:
            return str(self.numerateur)
        else:
            return str(self.numerateur) + " / " + str(self.denominateur)
    
    def __eq__(self, frac2):
        res1 = self.numerateur / self.denominateur
        res2 = frac2.numerateur / frac2.denominateur
        return res1 == res2
    
    def __lt__(self, frac2):
        res1 = self.numerateur / self.denominateur
        res2 = frac2.numerateur / frac2.denominateur
        return res1 < res2
    
    def __gt__(self, frac2):
        return None
    
    def __add__(self, frac2):
        return Fraction(self.numerateur * frac2.denominateur + frac2.numerateur * self.denominateur, self.denominateur * frac2.denominateur)
    
    def __mul__(self, frac2):
        return Fraction(self.numerateur * frac2.numerateur, self.denominateur * frac2.denominateur)
    
        
    

Frac1 = Fraction(12, 21)
Frac2 = Fraction(12, 35)
print(Frac1 * Frac2)
# print(Frac2 < Frac1)











IMPLEMENTATION POO
from visualisation_arbre_PO import *
from random import randint

# IMPLEMENTATION DE LA CLASSE NOEUD

class Noeud:
    def __init__(self, valeur, gauche, droit):
        self.valeur = valeur
        self.gauche = gauche
        self.droit = droit

# PARTIE 2 - CODE ET TESTS A ECRIRE

class Arbre:
    def __init__(self, noeud=None):
        self.racine = noeud

    def est_vide(self):
        '''
        DOCUMENTATION :
        Description de la fontion : Détermine si l'arbre est vide
        return (bool) : True si l'arbre est vide, False sinon
        
        TESTS :
        >>> arbre = Arbre()
        >>> Arbre.est_vide(arbre)
        True
        
        
        >>> #Deuxième appel de fonction 
        Résultat souhaité
        
        >>> #Troisième appel de fonction 
        Résultat souhaité
        '''
        #A compléter

    def est_feuille(self):
        '''
        DOCUMENTATION :
        Description de la fontion : Détermine si l'arbre est une feuille
        return (bool) : True si l'arbre est une feuille, False sinon
        
        TESTS :
        '''
        #A compléter


    def valeur_racine(self):
        '''
        DOCUMENTATION :
        Description de la fontion : Renvoie la valeur de la racine de l'arbre
        return (int, str, etc...) : Valeur de la racine de l'arbre
        précondition : A compléter
        
        TESTS :
        '''
        # Vérification de la précondition (voir énoncé : remarques importantes sur le travail)
        assert ..., " " # A compléter
        # Code de la fonction à compléter

    def SAG(self):
        '''
        DOCUMENTATION :
        Description de la fontion : Renvoie le sous-arbre gauche de l'arbre
        return (Arbre) : sous-arbre gauche
        précondition : A compléter
        
        TESTS :
        '''
        # Vérification de la précondition (voir énoncé : remarques importantes sur le travail)
        assert ..., " " # A compléter
        # Code de la fonction à compléter
    
    def SAD(self):
        '''
        DOCUMENTATION :
        Description de la fontion : Renvoie le sous-arbre droit de l'arbre
        return (Arbre) : sous-arbre droit
        précondition : A compléter
        
        TESTS :
        '''
        # Vérification de la précondition (voir énoncé : remarques importantes sur le travail)
        assert ..., " " # A compléter
        # Code de la fonction à compléter
    
    def taille(self):
        '''
        DOCUMENTATION :
        Description de la fontion : Calcule la taille d'un arbre
        return (int) : Taille de l'arbre
        
        TESTS :
        '''
        #A compléter

    def hauteur(self):
        '''
        DOCUMENTATION :
        Description de la fontion : Calcule la hauteur d'un arbre en respectant la convention
                donnée dans l'énoncé
        return (int) : Hauteur de l'arbre
        
        TESTS :
        '''
        #A compléter

    def est_egal(self, arbre):
        '''
        DOCUMENTATION :
        Description de la fontion : détermine si deux arbres sont identiques ou différents
        arbre (Arbre) : arbre sur lequel on va tester l'égalité
        return (bool) : True si les deux arbres sont identiques, False sinon 
        
        TESTS :
        '''
        #A compléter   

def cree_arbre_complet(h, maxi):
    '''
    DOCUMENTATION :
    Description de la fontion : crée un arbre complet de hauteur h
            avec des valeurs de noeud aléatoires comprises entre 0 et maxi inclus
    h (int) : hauteur de l'arbre
    maxi (int) : valeur maximale des noeuds
    return (Arbre) : arbre créé
    '''
    #A compléter   
        
def cree_peigne_gauche(h, maxi):
    '''
    DOCUMENTATION :
    Description de la fontion : crée un arbre peigne gauche de hauteur h
            avec des valeurs de noeud aléatoires comprises entre 0 et maxi inclus
    h (int) : hauteur de l'arbre
    maxi (int) : valeur maximale des noeuds
    return (Arbre) : arbre créé
    '''
    #A compléter 

def cree_peigne_droit(h, maxi):
    '''
    DOCUMENTATION :
    Description de la fontion : crée un arbre peigne droit de hauteur h
            avec des valeurs de noeud aléatoires comprises entre 0 et maxi inclus
    h (int) : hauteur de l'arbre
    maxi (int) : valeur maximale des noeuds
    return (Arbre) : arbre créé
    '''
    #A compléter 

if __name__ == '__main__':
    # Lancement des tests (laisser ces deux lignes de code inchangées)
    import doctest
    doctest.testmod(optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS, verbose=False)

# PARTIE 1 - TRAVAIL PRELIMINAIRE Question 2
noeud = Noeud(2, Noeud(8, Noeud(6, None, None), Noeud(9, None, None)), Noeud(1, Noeud(7, None, None), None))
arbre = Arbre(noeud)
#show(arbre, "arbre_du_cours")

# PARTIE 1 - TRAVAIL PRELIMINAIRE Question 3
noeud2 = Noeud(1, None, None)
arbre_feuille = Arbre(noeud2)
#show(arbre_feuille, "arbre_du_cours")





# PARTIE 2 - Question 3
        
    # Creation d'un arbre complet de hauteur 3

    
    # Creation d'un peigne gauche de hauteur 3
        # A compléter
    
    # Creation d'un peigne droit de hauteur 3
        # A compléter

# PARTIE 2 - Question 4
    # A compléter

