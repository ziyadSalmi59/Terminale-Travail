#exercice 2
from math import sqrt
def distance(point1, point2):
  return sqrt((point1[0]-point2[0])**2 + (point1[1]-point2[1])**2)

assert distance((1,0), (5,3)) == 5.0
assert distance((5,3), (5,3)) == 00

def plus_courte_distance(tab, depart):
  point = tab[0]
  min_dist = distance(tab[0], depart)
  for i in range (1, len(tab)):
    if distance(tab[i], depart)<min_dist:
      point = tab[i]
      min_dist = distance(tab[i], depart)
  return point

assert plus_courte_distance([(7,9), (2,5), (5,2)], (0,0)) == (2,5)

#exercice 9 bloc 7
def compare_tableau(tab1, tab2):
  for i in tab1: #selection du nombre a comparer chaque elem de tab2
    lim = 0 #limite pour voir si le nombre cherché n'est pas présent dans la liste 2
    for j in tab2: #j parcours la liste 2
      print(i, j, lim) 
      if lim + 1 == len(tab2) and i != j: 
        return False
      elif i == j:
          break;
      elif i != j:
        lim += 1
  return True

print(compare_tableau([1,2,3,4,5], [1,2,3,4,5]))

exercice 10
def tri_par_insertion(t):
    #on rempli la variable resultat de 0 (de la meme longeur que la liste T)
    resultat = [0 for i in range(len(t))]
    resultat[0] = t[0]
    for i in range(1, len(t)): #creer la liste T 
        j = i
        element_a_inserer = t[i]
        

        
        #Les éléments plus grands que que element_a_inserer sont décalés vers la droite  
        while j > 0 and t[j - 1] > element_a_inserer :
            resultat[j] = resultat[j - 1]
            j = j - 1
            
        # On insère l'élément au bon endroit
        resultat[j] = element_a_inserer
    return resultat

print(tri_par_insertion([1,4,6,2,8]))




#exrecice3
def tri(list):
    valeur = list[0]
    poids = list[1]
    return valeur/poids

list_objets = [[7,12], [4,11], [3,8], [3,10]]
listObjetsTriee = sorted(list_objets, key=tri, reverse = True)

p = 0
listeFinale = []
max = 30
for objs in tri(listObjetsTriee):
    if p + objs[1] <= max:
        listeFinale.append(objs)
        p += objs[1]

print(listeFinale, p)

